generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id               Int                      @id @default(autoincrement())
  studentId        String                   @unique
  firstName        String
  lastName         String
  fatherName       String
  nationalId       String                   @unique
  birthDate        DateTime
  grade            Int
  section          String
  classId          Int
  phone            String?
  address          String?
  enrollmentDate   DateTime                 @default(now())
  isActive         Boolean                  @default(true)
  attendances      Attendance[]
  payments         Payment[]
  classAssignments StudentClassAssignment[]
  class            Class                    @relation(fields: [classId], references: [id])

  @@map("students")
}

model Teacher {
  id         Int      @id @default(autoincrement())
  employeeId String   @unique
  firstName  String
  lastName   String
  nationalId String   @unique
  phone      String
  email      String?
  hireDate   DateTime
  isActive   Boolean  @default(true)
  classes    Class[]

  @@map("teachers")
}

model Class {
  id               Int                      @id @default(autoincrement())
  grade            Int
  section          String
  teacherId        Int
  capacity         Int                      @default(30)
  isActive         Boolean                  @default(true)
  attendances      Attendance[]
  classAssignments StudentClassAssignment[]
  teacher          Teacher                  @relation(fields: [teacherId], references: [id])
  students         Student[]

  @@unique([grade, section])
  @@map("classes")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   Int
  date      DateTime
  status    String
  notes     String?
  createdAt DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@map("attendances")
}

model Payment {
  id          Int       @id @default(autoincrement())
  studentId   Int
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      String
  type        String
  description String?
  createdAt   DateTime  @default(now())
  student     Student   @relation(fields: [studentId], references: [id])

  @@map("payments")
}

model Announcement {
  id             Int      @id @default(autoincrement())
  title          String
  content        String
  priority       String
  author         String
  publishDate    DateTime @default(now())
  isActive       Boolean  @default(true)
  targetAudience String   @default("all")

  @@map("announcements")
}

model MealService {
  id          Int      @id @default(autoincrement())
  date        DateTime
  mealType    String
  menuItems   String
  totalOrders Int      @default(0)
  isActive    Boolean  @default(true)

  @@map("meal_services")
}

model StudentClassAssignment {
  id               Int       @id @default(autoincrement())
  studentId        Int
  classId          Int
  startDate        DateTime
  endDate          DateTime?
  reason           String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  student          Student   @relation(fields: [studentId], references: [id])
  class            Class     @relation(fields: [classId], references: [id])

  @@unique([studentId, classId, startDate])
  @@map("student_class_assignments")
}
